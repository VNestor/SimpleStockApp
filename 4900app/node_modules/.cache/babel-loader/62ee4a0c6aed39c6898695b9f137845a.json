{"ast":null,"code":"!function (e, n) {\n  if (\"object\" == typeof exports && \"object\" == typeof module) module.exports = n();else if (\"function\" == typeof define && define.amd) define([], n);else {\n    var t = n();\n\n    for (var r in t) {\n      (\"object\" == typeof exports ? exports : e)[r] = t[r];\n    }\n  }\n}(window, function () {\n  return function (e) {\n    var n = {};\n\n    function t(r) {\n      if (n[r]) return n[r].exports;\n      var i = n[r] = {\n        i: r,\n        l: !1,\n        exports: {}\n      };\n      return e[r].call(i.exports, i, i.exports, t), i.l = !0, i.exports;\n    }\n\n    return t.m = e, t.c = n, t.d = function (e, n, r) {\n      t.o(e, n) || Object.defineProperty(e, n, {\n        enumerable: !0,\n        get: r\n      });\n    }, t.r = function (e) {\n      \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {\n        value: \"Module\"\n      }), Object.defineProperty(e, \"__esModule\", {\n        value: !0\n      });\n    }, t.t = function (e, n) {\n      if (1 & n && (e = t(e)), 8 & n) return e;\n      if (4 & n && \"object\" == typeof e && e && e.__esModule) return e;\n      var r = Object.create(null);\n      if (t.r(r), Object.defineProperty(r, \"default\", {\n        enumerable: !0,\n        value: e\n      }), 2 & n && \"string\" != typeof e) for (var i in e) {\n        t.d(r, i, function (n) {\n          return e[n];\n        }.bind(null, i));\n      }\n      return r;\n    }, t.n = function (e) {\n      var n = e && e.__esModule ? function () {\n        return e.default;\n      } : function () {\n        return e;\n      };\n      return t.d(n, \"a\", n), n;\n    }, t.o = function (e, n) {\n      return Object.prototype.hasOwnProperty.call(e, n);\n    }, t.p = \"\", t(t.s = 0);\n  }({\n    \"./xmlParser.js\": function xmlParserJs(e, n) {\n      function t(e, n) {\n        for (var t = 0; t < n.length; t++) {\n          var r = n[t];\n          r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);\n        }\n      }\n\n      e.exports = function () {\n        function e() {\n          !function (e, n) {\n            if (!(e instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n          }(this, e);\n        }\n\n        var n, r, i;\n        return n = e, (r = [{\n          key: \"_parseFromString\",\n          value: function value(e) {\n            var n = this,\n                t = e.replace(/\\s{2,}/g, \" \").replace(/\\\\t\\\\n\\\\r/g, \"\").replace(/>/g, \">\\n\"),\n                r = [];\n            return t.split(\"\\n\").map(function (e) {\n              if ((e = e.trim()) && !(e.indexOf(\"?xml\") > -1)) if (0 == e.indexOf(\"<\") && e.indexOf(\"CDATA\") < 0) {\n                var t = n._parseTag(e);\n\n                r.push(t), e.match(/\\/\\s*>$/) && r.push(n._parseTag(\"</\" + t.name + \">\"));\n              } else r[r.length - 1].value = n._parseValue(e);\n            }), this._convertTagsArrayToTree(r)[0];\n          }\n        }, {\n          key: \"_getElementsByTagName\",\n          value: function value(e) {\n            var n = [];\n            return \"*\" != e && this.name.toLowerCase() !== e.toLowerCase() || n.push(this), this.children.map(function (t) {\n              n = n.concat(t.getElementsByTagName(e));\n            }), n;\n          }\n        }, {\n          key: \"_parseTag\",\n          value: function value(e, n) {\n            var t = e.match(/([^\\s]*)=('([^']*?)'|\"([^\"]*?)\")|([\\/?\\w\\-\\:]+)/g),\n                r = {\n              name: t.shift().replace(/\\/\\s*$/, \"\"),\n              attributes: {},\n              children: [],\n              value: \"\",\n              getElementsByTagName: this._getElementsByTagName\n            };\n            return t.map(function (e) {\n              var n = e.split(\"=\");\n\n              if (!(n.length < 2)) {\n                var t = n[0],\n                    i = \"\";\n                i = 2 === n.length ? n[1] : (n = n.slice(1)).join(\"=\"), r.attributes[t] = \"string\" == typeof i ? i.replace(/^\"/g, \"\").replace(/^'/g, \"\").replace(/\"$/g, \"\").replace(/'$/g, \"\").trim() : i;\n              }\n            }), r;\n          }\n        }, {\n          key: \"_parseValue\",\n          value: function value(e) {\n            return e.indexOf(\"CDATA\") < 0 ? e.trim() : e.substring(e.lastIndexOf(\"[\") + 1, e.indexOf(\"]\"));\n          }\n        }, {\n          key: \"_convertTagsArrayToTree\",\n          value: function value(e) {\n            var n = [];\n            if (0 == e.length) return n;\n            var t = e.shift();\n            return t.value.indexOf(\"</\") > -1 || t.name.match(/\\/$/) ? (t.name = t.name.replace(/\\/$/, \"\").trim(), t.value = t.value.substring(0, t.value.indexOf(\"</\")), n.push(t), n = n.concat(this._convertTagsArrayToTree(e))) : 0 == t.name.indexOf(\"/\") ? n : (n.push(t), t.children = this._convertTagsArrayToTree(e), n = n.concat(this._convertTagsArrayToTree(e)));\n          }\n        }, {\n          key: \"_toString\",\n          value: function value(e) {\n            var n = this,\n                t = this._convertTagToText(e);\n\n            return e.children.length > 0 && (e.children.map(function (e) {\n              t += n._toString(e);\n            }), t += \"</\" + e.name + \">\"), t;\n          }\n        }, {\n          key: \"_convertTagToText\",\n          value: function value(e) {\n            var n = \"<\" + e.name;\n\n            for (var t in e.attributes) {\n              n += \" \" + t + '=\"' + e.attributes[t] + '\"';\n            }\n\n            return e.value.length > 0 ? n += \">\" + e.value + \"</\" + e.name + \">\" : n += \">\", 0 === e.children.length && (n += \"</\" + e.name + \">\"), n;\n          }\n        }, {\n          key: \"parseFromString\",\n          value: function value(e) {\n            return this._parseFromString(e);\n          }\n        }, {\n          key: \"toString\",\n          value: function value(e) {\n            return this._toString(e);\n          }\n        }]) && t(n.prototype, r), i && t(n, i), e;\n      }();\n    },\n    0: function _(e, n, t) {\n      e.exports = t(\"./xmlParser.js\");\n    }\n  });\n});","map":null,"metadata":{},"sourceType":"script"}